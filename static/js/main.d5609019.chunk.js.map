{"version":3,"sources":["component/Calculator.jsx","component/Display.jsx","component/App.jsx","reportWebVitals.js","index.js"],"names":["Calculator","useState","currentValue","setCurrentValue","prevVal","setPrevVal","formula","setFormula","currentSing","setCurrentSing","cadEval","setCadEval","prevValDigMax","setPrevValDigMax","inizialize","setInizialize","control","setControl","controlDot","setControlDot","bottom","bottoms","map","current","i","onClick","onClickButtoms","translate","value","id","className","style","gridColumn","gridRow","keyTrigger","maxDigitWarning","parseFloat","setTimeout","toString","calculate","eval","precise","toPrecision","handlerCalculate","test","length","result","concat","e","valueButtom","target","innerText","handlerFormula","console","log","checkFormat","caseEspecial","caseEspecialCheckOblig","caseZerosInput","caseZeroBeforeNum","caseDoit","expReg_sum","expReg_res","expReg_mul","expReg_div","replace","slice","handlerConcatDisplay","spacing","useEffect","position","Display","props","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5609019.chunk.js","sourcesContent":["import \"../style/Calculator.scss\";\nimport bottoms from \"../services/bottoms.json\";\nimport Display from \"./Display.jsx\";\nimport React, { useEffect, useState } from \"react\";\n\nfunction Calculator() {\n  const [currentValue, setCurrentValue] = useState(\"\");\n  const [prevVal, setPrevVal] = useState(0);\n  const [formula, setFormula] = useState(\"\");\n  const [currentSing, setCurrentSing] = useState(\"pos\");\n  const [cadEval, setCadEval] = useState(\"\");\n  const [prevValDigMax, setPrevValDigMax] = useState(0);\n  const [inizialize, setInizialize] = useState(false);\n  const [control, setControl] = useState(false);\n  const [controlDot, setControlDot] = useState(false);\n  let bottom = bottoms.bottom.map((current, i) => {\n    return (\n      <buttom\n        onClick={onClickButtoms}\n        translate=\"no\"\n        value={current.value}\n        id={current.id}\n        className={`colors-${i}`}\n        style={\n          current.value == \"equal\"\n            ? { gridColumn: current.style, gridRow: \"4/6\" }\n            : { gridColumn: current.style }\n        }\n      >\n        {current.keyTrigger}\n      </buttom>\n    );\n  });\n  function maxDigitWarning() {\n    setPrevValDigMax(parseFloat(currentValue));\n    setCurrentValue(\"Digit Limit Met\");\n    setTimeout(() => setCurrentValue(prevValDigMax.toString()), 1000);\n  }\n  function calculate() {\n    return eval(formula);\n  }\n  function precise(value) {\n    return parseFloat(value).toPrecision();\n  }\n  function handlerCalculate() {\n    //no calcula si encuentra alguno de estos caracteres ya que entraria en conflicto con el calculo o si encuentra un = en el string\n    if (/[\\-\\*\\+\\./]/.test(formula[formula.length - 1]) || /=/.test(formula))\n      return;\n    let result = calculate();\n    setFormula(formula + \"=\".concat(precise(result)));\n    setCurrentValue(precise(result));\n    setPrevVal(result);\n  }\n  function onClickButtoms(e) {\n    const valueButtom = e.target.innerText;\n\n    const expReg = /\\+|x|\\/|\\-|=/g;\n    //si AC inizialize\n    if (/AC/g.test(valueButtom)) {\n      setCurrentValue(\"\");\n      setFormula(\"\");\n      setCurrentSing(\"pos\");\n      setCurrentValue(\"0\");\n      setPrevVal(0);\n      setCadEval(\"\");\n      setInizialize(true);\n      setControl(false);\n      return;\n    }\n    if (control == false && valueButtom == \"0\") {\n      console.log(\"es\");\n      return;\n    }\n    if (/\\d\\.\\d/.test(currentValue) && valueButtom == \".\") {\n      return;\n    }\n    if (!expReg.test(valueButtom)) {\n      //is number\n\n      // if (/^0+/.test(currentValue) && currentValue.length + 1 >= 2) {\n      //   console.log(\"entro\");\n      //   return;\n      // }\n      if (currentSing == \"=\" && formula[formula.length - 1] != \".\") {\n        //si es igual y presiona number ocurre un AC con valor actualizado\n        setCurrentValue(valueButtom);\n        setFormula(valueButtom);\n        setCurrentSing(\"pos\");\n        setPrevVal(0);\n        setCadEval(valueButtom);\n        return;\n      }\n\n      setCurrentValue(\n        /\\+|\\-|\\/|x/g.test(currentValue)\n          ? valueButtom\n          : inizialize == true\n          ? valueButtom\n          : currentValue.concat(valueButtom)\n      );\n      setFormula(formula.concat(valueButtom));\n      setControl(true);\n    } else {\n      //is operator\n      handlerFormula(valueButtom, \" \");\n    }\n    setInizialize(false);\n  }\n  useEffect(() => {\n    checkFormat();\n  });\n  function checkFormat() {\n    if (currentValue.length + 1 > 22) {\n      maxDigitWarning();\n      setCurrentSing(\"pos\");\n      return;\n    }\n    // checkFormat se encarga de verificar que el formato matematico se encuentre correcto\n    const general = /[\\+\\-x\\/]/;\n    const caseEspecial = /[\\+\\/\\*]\\-+/;\n    const caseEspecialCheckOblig = /^[\\+\\/\\*]\\-+$/;\n    const caseZerosInput = /^0+|[\\+\\-\\*\\/]0+/;\n    const caseZeroBeforeNum = /0[123456789]/g;\n    const caseDoit = /\\.+/;\n    //conditions no permitions\n    const expReg_sum = /\\+[\\+\\*\\/\\=]+/g;\n    const expReg_res = /\\-[\\+\\*\\/\\=]+/g;\n    const expReg_mul = /\\*[\\+\\*\\/\\=]+/g;\n    const expReg_div = /\\/[\\+\\*\\/\\=]+/g;\n    const expReg_equal = /=/g;\n\n    //case doit\n    if (caseDoit.test(formula)) {\n      setFormula(formula.replace(caseDoit, \".\"));\n      setCurrentValue(currentValue.replace(caseDoit, \".\"));\n      return;\n    }\n    //case zeros\n    console.log(\n      caseZerosInput.test(formula.slice(0)),\n      caseZerosInput.test(currentValue.slice(0))\n    );\n    if (\n      caseZerosInput.test(formula.slice(0)) ||\n      caseZerosInput.test(currentValue.slice(0))\n    ) {\n      setFormula(\n        formula.replace(\n          caseZerosInput,\n          currentSing != \"pos\" ? currentSing.replace(/x/, \"*\") : \"\" + \"0\"\n        )\n      );\n      setCurrentValue(currentValue.replace(caseZerosInput, \"0\"));\n    }\n    if (caseZeroBeforeNum.test(currentValue)) {\n      console.log(\"caseZeroBeforeNum\");\n      setFormula(formula.replace(caseZeroBeforeNum, currentValue.slice(1)));\n      setCurrentValue(\n        currentValue.replace(caseZeroBeforeNum, currentValue.slice(1))\n      );\n    }\n    //case equal\n    if (expReg_equal.test(formula) && general.test(currentSing)) {\n      setFormula(prevVal.toString().concat(currentSing).replace(/x/, \"*\"));\n      setCurrentValue(currentSing);\n      return;\n    }\n    //case with sum\n    if (expReg_sum.test(formula)) {\n      //si es num me salgo\n      if (currentSing == \"pos\") return;\n      //caso en que cumpla el caso especial (+-) y si ya se encuentra disponible (+-) y quiere cambiar de valor permitirlo\n      if (\n        caseEspecial.test(formula) &&\n        caseEspecialCheckOblig.test(formula.slice(formula.length - 2))\n      ) {\n        setFormula(formula.replace(caseEspecial, \"+-\"));\n        return;\n      }\n      setFormula(formula.replace(expReg_sum, currentSing.replace(/x/, \"*\")));\n      return;\n    }\n    //case with rest\n    if (expReg_res.test(formula)) {\n      if (currentSing == \"pos\") return;\n      setFormula(formula.replace(expReg_res, currentSing.replace(/x/, \"*\")));\n      return;\n    }\n    //case with division\n    if (expReg_div.test(formula)) {\n      if (currentSing == \"pos\") return;\n      if (\n        caseEspecial.test(formula) &&\n        caseEspecialCheckOblig.test(formula.slice(formula.length - 2))\n      ) {\n        setFormula(formula.replace(caseEspecial, \"/-\"));\n        return;\n      }\n      setFormula(formula.replace(expReg_div, currentSing.replace(/x/, \"*\")));\n      return;\n    }\n    //case with mult\n    if (expReg_mul.test(formula)) {\n      if (currentSing == \"pos\") return;\n      if (\n        caseEspecial.test(formula) &&\n        caseEspecialCheckOblig.test(formula.slice(formula.length - 2))\n      ) {\n        setFormula(formula.replace(caseEspecial, \"*-\"));\n        return;\n      }\n      setFormula(formula.replace(expReg_mul, currentSing.replace(/x/, \"*\")));\n      return;\n    }\n  }\n  function handlerConcatDisplay(value, spacing) {\n    setCadEval(cadEval.concat(spacing + value.replace(/x/g, \"*\") + spacing));\n    setFormula(formula.concat(value.replace(/x/g, \"*\")));\n    setCurrentValue(value);\n  }\n  function handlerFormula(value, spacing = \"\") {\n    //if is '=' calcule\n    setCurrentSing(value);\n    if (/=/g.test(value)) {\n      handlerCalculate();\n      return;\n    }\n    handlerConcatDisplay(value, spacing);\n  }\n  return (\n    <div className=\"calculator\" style={{ position: \"relative\" }}>\n      <Display currentValue={currentValue} formula={formula} />\n      <div className=\"calculator-container\">{bottom}</div>\n    </div>\n  );\n}\n\nexport default Calculator;\n","import \"../style/Display.scss\";\n\nconst Display = (props) => {\n  return (\n    <div className=\"display\">\n      <div className=\"formulaScreen\" translate=\"no\">\n        {props.formula}\n      </div>\n      <div id=\"display\" className=\"outputScreen\" translate=\"no\">\n        {props.currentValue}\n      </div>\n    </div>\n  );\n};\nexport default Display;\n","import \"../style/App.scss\";\nimport Calculator from './Calculator.jsx'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-container\">\n        <Calculator />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}